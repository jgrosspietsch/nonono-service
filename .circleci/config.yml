version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.11.4
        environment:
          GO111MODULE: "on"
    working_directory: /go/src/github.com/jgrosspietsch/nonono-service
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Compile executable
          command: go build
      - run:
          name: Set container env vars
          command: |
            echo 'export FULL_IMAGE_NAME="nonono-service:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Build image
          command: docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Test image
          command: |
            docker run -d -p 8888:8888 --name built-image $FULL_IMAGE_NAME
            sleep 10
            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:8888/ping | grep healthy
      - run:
          name: Push to Docker hub
          command: |
            docker login --username $DOCKER_USER --password $DOCKER_PASS
            docker push $FULL_IMAGE_NAME
            docker logout
#   deploy:
#     docker:
#       - image: circleci/python:3.6.1
#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: Install kubectl
#           command: |
#             sudo apt-get update && sudo apt-get install -y apt-transport-https
#             curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
#             echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
#             sudo apt-get update
#             sudo apt-get install -y kubectl
#       - run:
#           name: Deploy
#           command: |
#             echo $(echo $KUBE_CLUSTER_CONFIG | base64 --decode) > nonono-cluster-kubeconfig.yml
#             kubectl --kubeconfig="nonono-cluster-kubeconfig.yml" create -f ./deploy/nonono-service-deployment.yml
# workflows:
#   version: 2
#   build-deploy:
#     jobs:
#       - build
#       - deploy:
#           requires:
#             - build
#           filters:
#             branches:
#               only: master